{"version":3,"sources":["atoms.tsx","Globalstyle.tsx","Components/CreateCategory.tsx","Components/CreateToDo.tsx","Components/ToDo.tsx","Components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","GlobalStyle","createGlobalStyle","props","theme","bgColor","makeCategoryState","atom","key","default","toDoState","JSON","parse","localStorage","getItem","categoryState","NO_STATUS","toDoSelector","selector","get","toDos","category","filter","toDo","CreateCategory","useRecoilState","setCategories","useForm","register","handleSubmit","setValue","onSubmit","oldCategory","text","id","Date","now","required","placeholder","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","ToDoContainer","styled","li","textColor","ToDo","newCategories","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","console","log","TO_DO","IN_PROGRESS","DONE","map","newCategory","Title","header","accentColor","CategoryTitle","h2","Container","section","ToDoList","allToDos","makeCategories","categories","setCategory","useEffect","setItem","stringify","value","onInput","App","ReactDOM","render","StrictMode","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.b38b1df3.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\n\nexport enum Categories {\n    \"NO_STATUS\" = \"미분류\",\n    \"TO_DO\" = \"할 일\",\n    \"IN_PROGRESS\" = \"진행중\",\n    \"DONE\" = \"종료\"\n}\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: Categories;\n}\n\nexport interface IMakeCategory {\n    text: string;\n    id: number;\n}\n\nexport const makeCategoryState = atom<IMakeCategory[]>({\n    key: \"makeCategory\",\n    default: []\n})\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: JSON.parse(localStorage.getItem(\"TO_DO_LIST\") || \"[]\"),\n});\n\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    default: Categories.NO_STATUS,\n});\n\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n        return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n","import { createGlobalStyle } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\n\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbody {\n    background-color: ${props => props.theme.bgColor}\n}\n\n`\n\n\nexport default GlobalStyle;\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, makeCategoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n    category: string;\n}\n\n// export const categoryState = atom<Categories>({\n//     key: \"category\",\n//     default: Categories.TO_DO,\n//   });\n\nfunction CreateCategory() {\n    const [category, setCategories] = useRecoilState(makeCategoryState)\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValid = ({ category }: IForm) => {\n        setCategories((oldCategory) => [\n            { text: category, id: Date.now() },\n            ...oldCategory,\n        ]);\n        setValue(\"category\", \"\");\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)}>\n            <input\n                {...register(\"category\", {\n                    required: \"Please write a category\",\n                })}\n                placeholder=\"Write a category\"\n            />\n            <button>Add</button>\n        </form>\n    );\n}\n\nexport default CreateCategory;","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState);\n    const category = useRecoilValue(categoryState);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValid = ({ toDo }: IForm) => {\n        setToDos((oldToDos) => [\n            { text: toDo, id: Date.now(), category },\n            ...oldToDos,\n        ]);\n        setValue(\"toDo\", \"\");\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)}>\n            <input\n                {...register(\"toDo\", {\n                    required: \"Please write a To Do\",\n                })}\n                placeholder=\"Write a to do\"\n            />\n            <button>Add</button>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, categoryState, IMakeCategory, IToDo, makeCategoryState, toDoSelector, toDoState } from \"../atoms\";\n\n\nconst ToDoContainer = styled.li`\n    margin-top: 30px;\n    width: 400px;\n    height: 50px;\n    color: ${props => props.theme.textColor};\n`\n\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const toDos = useRecoilValue(toDoSelector);\n    const setToDos = useSetRecoilState(toDoState);\n    const newCategories = useRecoilValue(makeCategoryState);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name },\n        } = event;\n\n        setToDos((oldToDos) => {\n            const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n            const newToDo = { text, id, category: name as any };\n            return [\n                ...oldToDos.slice(0, targetIndex),\n                newToDo,\n                ...oldToDos.slice(targetIndex + 1),\n            ];\n        });\n    };\n    console.log(toDos)\n    return (\n        <ToDoContainer>\n            <span>{text}</span>\n            {category !== Categories.NO_STATUS && <button name={Categories.NO_STATUS} onClick={onClick}>미분류</button>}\n            {category !== Categories.TO_DO && <button name={Categories.TO_DO} onClick={onClick}>할 일</button>}\n            {category !== Categories.IN_PROGRESS && <button name={Categories.IN_PROGRESS} onClick={onClick}>진행중</button>}\n            {category !== Categories.DONE && <button name={Categories.DONE} onClick={onClick}>종료</button>}\n            {newCategories?.map((newCategory) => (\n                <button name={newCategory.text} onClick={onClick}>{newCategory.text}</button>\n            ))}\n        </ToDoContainer>\n    );\n}\n\nexport default ToDo;\n","import React, { useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, categoryState, makeCategoryState, toDoSelector, toDoState } from \"../atoms\";\nimport CreateCategory from \"./CreateCategory\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nexport interface IdefaultCategories {\n    NO_STATUS: string;\n    TO_DO: string;\n    IN_PROGRESS: string;\n    DONE: string;\n}\n\nconst Title = styled.header`\n    width: 90%;\n    height: 80px;\n    margin: 0 auto;\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    color: ${(props) => props.theme.accentColor};\n    font-size: 42px;\n`\n\nconst CategoryTitle = styled.h2`\n    margin-top: 20px;\n    font-size: 32px;\n    color: ${(props) => props.theme.accentColor};\n`\n\nconst Container = styled.section`\n    margin: 0 auto;\n\n`\n\nfunction ToDoList() {\n    const allToDos = useRecoilValue(toDoState) // 전체 투두를 로컬스토리지에 저장\n    const toDos = useRecoilValue(toDoSelector); // 보여줄 toDos\n    const makeCategories = useRecoilValue(makeCategoryState);\n    const [categories, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        const { currentTarget: { value } } = event;\n        setCategory(value as any);\n    };\n\n\n    const defaultCategories: IdefaultCategories = {\n        NO_STATUS: \"미분류\",\n        TO_DO: \"할 일\",\n        IN_PROGRESS: \"진행중\",\n        DONE: \"종료\"\n    }\n\n    useEffect(() => {\n        localStorage.setItem(\"TO_DO_LIST\", JSON.stringify(allToDos))\n    }, [allToDos])\n\n    console.log(categories)\n    return (\n        <>\n            <Title>\n                <h1>To Dos</h1>\n            </Title>\n\n            <CreateToDo />\n            <CreateCategory />\n            <Container>\n                <select value={categories} onInput={onInput}>\n                    {/* {Object.keys(defaultCategories).map((defaultCategory) => {\n            <option value={defaultCategory}>\n                {\n                Object.values(defaultCategories).map(e => e)\n                }\n            </option>\n            })} */}\n                    <option value={Categories.NO_STATUS}>{Categories.NO_STATUS}</option>\n                    <option value={Categories.TO_DO}>{Categories.TO_DO}</option>\n                    <option value={Categories.IN_PROGRESS}>{Categories.IN_PROGRESS}</option>\n                    <option value={Categories.DONE}>{Categories.DONE}</option>\n                    {makeCategories?.map((category) => (\n                        <option key={category.id} value={category.text}>{category.text}</option>\n                    ))}\n                </select>\n                <CategoryTitle>{categories}</CategoryTitle>\n                {toDos?.map((toDo) => (\n                    <ToDo key={toDo.id} {...toDo} />\n                ))}\n            </Container>\n        </>\n    );\n}\n\nexport default ToDoList;\n","import GlobalStyle from \"./Globalstyle\";\nimport ToDoList from \"./Components/ToDoList\";\n\n\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ThemeProvider } from 'styled-components';\nimport { RecoilRoot } from \"recoil\";\nimport { darkTheme } from \"./theme\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import { DefaultTheme } from \"styled-components\";\n\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"#222f3e\",\n    textColor: \"white\",\n    accentColor: \"#01a3a4\",\n    cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}